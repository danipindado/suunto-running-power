/* While in sport mode do this once per second */
/*before start: configure parameters, initialize*/
if(SUUNTO_DURATION<1)
{
  T=0;
  x0p=SUUNTO_ALTI;
  x0=SUUNTO_ALTI;
  x1=0;
  x2=0;
  k0=0;
  k1=0;
  k2=0;
  err=0;
  omega=0.005;
  slope=0;
  initialSpeed = SUUNTO_SPEED/3.6; 
  dist1=0;
  RESULT=0;
  

}
else 
{

  /* slope calculation only if new distance data */
  T=1000*SUUNTO_DISTANCE-dist1;
  if(T > 0)
  {
    /*keep distance data for next iteration*/
    dist1=1000*SUUNTO_DISTANCE;
  
    /*abg filter http://www.plctalk.net/qanda/showthread.php?t=67883 http://deltamotion.com/peter/pdf/AlphaBetaGammaCode.pdf */
    /*gains: MINIMUM IAE*/
    k0=2.089582*T*omega;
    k1=1.479222*T*Suunto.pow(omega, 2);
    k2=T*Suunto.pow(omega, 3);
  
    /*calculate estimated position*/
    x0p=(((0.5*x2*T)*T+x1)*T+x0);
  
    /*calculate error between actual and estimated*/
    err=SUUNTO_ALTI-x0p;
  
    /*update position, velocity and acceleration*/
    x0=x0p+k0*err;
    x1=x1+(x2*T+k1*err);
    x2=x2+k2*err;

    /*slope is derivative of altitude with respect to distance*/
    slope=x1;

  }


  /* 2D speed */
  speed = SUUNTO_SPEED/3.6;
  
  /* 3D speed */
  speed = speed/Suunto.cos(Suunto.atan2(slope,1));

  /*Aero contribution (Arsac 2001): 0.5 * rho * Cd * Af * V^2, rho = 1.2, Cd = 0.9*/
  Af = (0.2025*Suunto.pow(SUUNTO_USER_HEIGHT/100, 0.725)*Suunto.pow(SUUNTO_USER_WEIGHT, 0.425))*0.266; /* Frontal Area*/
  cAero = 0.5*1.2*0.9*Af*Suunto.pow(speed, 2);

  /* Kinetic Energy contribution (Arsac 2001): 0.5 * (V^2-V0^2) / d*/
  if(SUUNTO_DISTANCE >0)
  {
    cKin = 0.5*(Suunto.pow(speed,2)-Suunto.pow(initialSpeed,2))/(1000*SUUNTO_DISTANCE);
  }
  else
  {
    cKin = 0.0;
  }


  /* Energy Cost of Running according to slope (Minetti 2002)*/
  /*cSlope = 155.4*Suunto.pow(slope,5) - 30.4*Suunto.pow(slope,4) - 43.3*Suunto.pow(slope,3) + 46.3*Suunto.pow(slope,2) + 19.5*slope + 3.6;*/
  cSlope = ((((155.4*slope-30.4)*slope-43.3)*slope+46.3)*slope+19.5)*slope + 3.6;

  /* Efficiency (Skiba's govss.pdf and spreadsheet)*/
  /* eff = (0.25 + 0.054*speed)*(1 - 0.5*speed/8.33);*/
  eff = (-0.0032413*speed+0.038994)*speed+0.25;

  power = (cAero + cKin + cSlope*eff*SUUNTO_USER_WEIGHT)*speed;
  if(power <0)
  {
    power =0;
  }
  RESULT=power;
}